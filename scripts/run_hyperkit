#!/bin/bash

# This still requires Docker For Mac

set -ex

while getopts "c:i:l:" arg; do
  case $arg in
    i) cfdev_efi="$OPTARG"
      ;;
    c) cf_deps_iso="$OPTARG"
      ;;
    l) linuxkit_bin="$OPTARG"
      ;;
  esac
done

script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cache_dir="$HOME"/.cfdev/cache

if [[ -z $cf_deps_iso ]]; then
  cf_deps_iso="$script_dir"/../output/cf-deps.iso
fi

if [[ -z $cfdev_efi ]]; then
  cfdev_efi="$script_dir"/../output/cfdev-efi.iso
fi

if [[ -z $linuxkit_bin ]]; then
  linuxkit_bin="$cache_dir"/linuxkit
fi

hyperkit_bin="$cache_dir/hyperkit"
vpnkit_bin="$cache_dir/vpnkit"
qcowtool_bin="$cache_dir/qcow-tool"
uefi_fw="$cache_dir/UEFI.fd"

tmp_dir="$(mktemp -d)"

trap cleanup EXIT

cleanup() {
  rm -rf "$tmp_dir"
}

ldir="$tmp_dir"/linuxkit
mkdir -p "$ldir"

start_linuxkit () {
  "$linuxkit_bin" run hyperkit \
      -state "$ldir" \
      -console-file \
      -hyperkit "$hyperkit_bin" \
	  -cpus 4 \
	  -mem 8192 \
	  -fw "$uefi_fw" \
	  -networking "vpnkit" \
	  -vpnkit "$vpnkit_bin" \
	  -disk type="qcow,size=50G,trim=true,qcow-tool=$qcowtool_bin,qcow-onflush=os,qcow-compactafter=262144,qcow-keeperased=262144" \
	  -disk file="$cf_deps_iso" \
	  --uefi "$cfdev_efi"
}

main () {
  start_linuxkit
}

main
