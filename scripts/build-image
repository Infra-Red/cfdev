#!/bin/bash -e
set -euxo pipefail

os=darwin

while getopts "l:o:" arg; do
  case $arg in
    l) linuxkit=$OPTARG
      ;;
    o) os=$OPTARG
      ;;
  esac
done

if [[ -z ${linuxkit:-} ]]; then
  if ! which linuxkit; then
    echo "ERROR: either provide the linuxkit binary with the '-l' flag or add linuxkit to your path"
    exit 1
  else
    linuxkit="linuxkit"
  fi
fi

dir="$( cd "$( dirname "$BASH_SOURCE[0]" )" && cd .. && pwd )"
script_dir="$dir/scripts"
output_dir="$dir"/output
linuxkit_dir="$dir"/linuxkit
baseyml_path="$linuxkit_dir"/base.yml

function cleanup() {
  rm -f $dir/src/github.com/moby/vpnkit/c/vpnkit-9pmount-vsock/build.yml
  rm -f $dir/src/github.com/moby/vpnkit/c/vpnkit-tap-vsockd/build.yml
}
trap cleanup exit

function build_vpnkit_image () {
  image=$1

  pushd $dir/src/github.com/moby/vpnkit > /dev/null
    cat > ./c/$image/build.yml <<EOF
image: $image
org: pivotal
network: true
disable-content-trust: true
EOF

    "$linuxkit" pkg build -hash dev ./c/$image
  popd > /dev/null
}

mkdir -p "$output_dir"

"$linuxkit" pkg build -hash dev "$linuxkit_dir"/pkg/bosh-lite-routing
"$linuxkit" pkg build -hash dev "$linuxkit_dir"/pkg/expose-multiple-ports
"$linuxkit" pkg build -hash dev "$linuxkit_dir"/pkg/garden-runc
"$linuxkit" pkg build -hash dev "$linuxkit_dir"/pkg/openssl

if [[ "$os" == "windows" ]]; then
  baseyml_path="$linuxkit_dir"/base-windows.yml
  build_vpnkit_image vpnkit-9pmount-vsock
  build_vpnkit_image vpnkit-tap-vsockd
fi

"$linuxkit" build \
 -disable-content-trust \
 -name cfdev \
 -format iso-efi \
 -dir "$output_dir" \
 $baseyml_path \
 "$linuxkit_dir"/garden.yml