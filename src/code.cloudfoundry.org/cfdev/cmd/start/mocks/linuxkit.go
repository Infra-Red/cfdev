// Code generated by MockGen. DO NOT EDIT.
// Source: code.cloudfoundry.org/cfdev/cmd/start (interfaces: LinuxKit)

// Package mocks is a generated GoMock package.
package mocks

import (
	process "code.cloudfoundry.org/cfdev/process"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLinuxKit is a mock of LinuxKit interface
type MockLinuxKit struct {
	ctrl     *gomock.Controller
	recorder *MockLinuxKitMockRecorder
}

// MockLinuxKitMockRecorder is the mock recorder for MockLinuxKit
type MockLinuxKitMockRecorder struct {
	mock *MockLinuxKit
}

// NewMockLinuxKit creates a new mock instance
func NewMockLinuxKit(ctrl *gomock.Controller) *MockLinuxKit {
	mock := &MockLinuxKit{ctrl: ctrl}
	mock.recorder = &MockLinuxKitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLinuxKit) EXPECT() *MockLinuxKitMockRecorder {
	return m.recorder
}

// CreateVM mocks base method
func (m *MockLinuxKit) CreateVM(arg0 process.VM) error {
	ret := m.ctrl.Call(m, "CreateVM", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVM indicates an expected call of CreateVM
func (mr *MockLinuxKitMockRecorder) CreateVM(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVM", reflect.TypeOf((*MockLinuxKit)(nil).CreateVM), arg0)
}

// IsRunning mocks base method
func (m *MockLinuxKit) IsRunning() (bool, error) {
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsRunning indicates an expected call of IsRunning
func (mr *MockLinuxKitMockRecorder) IsRunning() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockLinuxKit)(nil).IsRunning))
}

// Start mocks base method
func (m *MockLinuxKit) Start(arg0, arg1 int, arg2 string) error {
	ret := m.ctrl.Call(m, "Start", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockLinuxKitMockRecorder) Start(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockLinuxKit)(nil).Start), arg0, arg1, arg2)
}

// Stop mocks base method
func (m *MockLinuxKit) Stop() error {
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockLinuxKitMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockLinuxKit)(nil).Stop))
}
